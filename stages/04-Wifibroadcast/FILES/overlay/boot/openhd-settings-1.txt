#!/bin/bash
#
# Common settings (need to be kept in sync for both TX and RX!)
# ============================================================
#
# Desired frequency in MHz
FREQ=2472
#
# Set to "Y" on the RX for auto-scanning. Frequency still has to be set on TX!
# Feature might be buggy or not work at all!
FREQSCAN=N
#
# the following frequencies are supported:
# 2412, 2417, 2422, 2427, 2432, 2437, 2442, 2447, 2452, 2457, 2462, 2467, 2472, 2484 (Ralink and Atheros)
# 2312, 2317, 2322, 2327, 2332, 2337, 2342, 2347, 2352, 2357, 2362, 2367, 2372, 2377, 2382, 2387, 2392, 2397, 2402, 2407 (Atheros only)
# 2477, 2482, 2487, 2489, 2492, 2494, 2497, 2499, 2512, 2532, 2572, 2592, 2612, 2632, 2652, 2672, 2692, 2712 (Atheros only)
#
# 5180, 5200, 5220, 5240, 5260, 5280, 5300, 5320
# 5500, 5520, 5540, 5560, 5580, 5600, 5620, 5640, 5660, 5680, 5700
# 5745, 5765, 5785, 5805, 5825
#
# 2.3Ghz and 2.5-2.7Ghz band only works with Atheros cards. Check your local regulations before transmitting!
# Frequencies higher than 2512MHz work with Atheros, but with a lot lower transmit power and sensitivity and
# thus greatly reduced range. Only useable for short-range applications!
#
#
# Set this to "single" for single TX wifi card, for dual TX wifi cards set "dual".
# MAC addresses and frequency for the RX and TX wifi need to be set here when dual TX mode is enabled.
#
TXMODE=single
#
MAC_RX[0]=00c0ca91ee30
FREQ_RX[0]=2484
#
MAC_RX[1]=24050f953384
FREQ_RX[1]=2484
#
MAC_RX[2]=24050f953378
FREQ_RX[2]=2484
#
MAC_RX[3]=24050f953373
FREQ_RX[3]=2484
#
#
MAC_TX[0]=24050f953378
FREQ_TX[0]=5745
#
MAC_TX[1]=ec086b1c7834
FREQ_TX[1]=2472
#
#
TXPOWER=2000
TxPowerAir=58
TxPowerGround=58
# Wifi Datarate. Lower settings yield higher range and vice versa.
# 1=5.5Mbit, 2=11Mbit, 3=12Mbit, 4=19.5Mbit/18Mbit, 5=24Mbit, 6=36Mbit
DATARATE=4
#
#
# FEATURE WIFI BANDWIDTH SETTINGS: If ath9k Wi-Fi card, users can choose between 3 bandwidth options: 20mhz, 10mhz or 5mhz. 
#***Default @ 20mhz compatible with all Wireless cards. 5/10mhz Bandwidth options will result in 1/4 & 1/2 of total available Datarate/Mbit of the selected Wi-Fi datarate option (1-6) selected above.
#
# Default Bandwidth:5, 10 or 20.
#
Bandwidth=20
UplinkSpeed=11
#
#
# FEATURE BAND SWITCHER: allows users to remotely switch between 5/10/20 mhz bandwidth. simply assign RC Channel and pwm values for each setting (>2 selectable settings must be used on Axis RC channels 1-8)
#**ONLY TESTED ON THE GROUND SO FAR. IN ORDER FOR THE BANDWIDTH TO SWITCH, THERE MUST BE A GOOD LINK BETWEEN ALL AIR AND GROUND WIFI CARDS. 
#**RC bandwidth switcher is only tested with pi2/3 air.  if using RPI zero it is recommended to disable the switcher and instead set a fixed desired bandwidth prior to flight.  
#**YOU MUST ALSO DEFINE THE MAC ADDRESSES OF YOUR GROUND ath9k Atheros cards for use with the RC bandwidth Switcher.  
#MAKE SURE THAT YOUR MOST POWERFUL GROUND RECEIVER CARD MAC ADDRESS IS SET AS THE "PRIMARY RX/TX".
#
# IsBandSwicherEnabled "0"=disabled "1"= enabled
#
#
IsBandSwicherEnabled=0
ChannelToListen2=8
#Ground TX\RX card
PrimaryCardMAC=0
#Ground RX card
SlaveCardMAC=0

Band5Below=1200
Band10ValueMin=1200
Band10ValueMax=1650
Band20After=1650

# Choose between 30, 40, 48, 59.9
FPS=48
#
#
# FEC SETTINGS
# max. blocklength Ralink = 2278, Atheros = 1550
# min. sensible blocklength ~ 700
VIDEO_BLOCKS=8
VIDEO_FECS=4
VIDEO_BLOCKLENGTH=1024
#
#
# Telemetry transmission method:
# wbc = use wifibroadcast as telemetry up/downlink
# external = use external means as telemetry up/downlink (LRS or 3DR dongles)
# if set to external, set serialport to which LRS or 3DR dongle is connected
# both on ground and air pi
TELEMETRY_TRANSMISSION=wbc
#
#
# Set to "disabled" or "mavlink" for Mavlink (Tower App, Missionplanner, etc.)
TELEMETRY_UPLINK=mavlink
#
# RC OVER OPEN.HD SETTINGS
# Set this to "mavlink" to enable R/C over Open.HD using mavlink protocol or "msp" for MSP protocol
# Set to "sumd" for Graupner SUMD, "ibus" for Flysky IBUS, "srxl" for Multiplex SRXL / XBUS Mode B. Set to "disabled" to disable
# See joyconfig.txt for other settings, default settings work for Taranis in USB
#
#Joystick mode
RC=mavlink
#
# RC Type RANGE or ENCRYPTION
# Range utilizes the original EZ-wifibroadcast "joystick" code.  It is only confirmed to reliably work with Atheros Ath9k cards, this setting is not as secure but should provide better range.
#Encryption is a more secure means of RC uplink, if using RPI zero on the UAV, this causes higher CPU usage, so it is recommended to only use encryption with Pi2/3 boards, encryption RC may have reduced range.
#Values:  "Range" or "Encryption"
#
EncryptionOrRange=Range
#
# AIRPI settings
# ============================================================
#
# set to "auto" for automatic video bitrate measuring. Set to a fixed value to
# disable automatic measuring
VIDEO_BITRATE=auto
#
#
# if VIDEO_BITRATE above is set to "auto" the videobitrate will be determined
# by measuring the available bitrate and multiplying it with BITRATE_PERCENT
# Depending on channel utilization by other wifi networks you may need to set
# this to a lower value like 60% to avoid a delayed video stream.
# On free channels you may set this to a higher value like 75% to get a higher
# bitrate and thus image quality.
BITRATE_PERCENT=60
#
#
# CTS protection (use in areas with other wifi networks)
# set to "auto" for automatic detection, "N" to disable, "Y" to enable
CTS_PROTECTION=Y
#
#
# Camera image settings
# V1 cam: 1280x720: 30fps, 48fps. 1920x1080: 30fps
# V2 cam: 1280x720: 30fps, 48fps, 59.9fps. 1640x922: 30fps, 40fps. 1920x1080: 30fps
WIDTH=1280
HEIGHT=720
MirrorDSI_To_HDMI=Y
#
#
# Lower values mean faster glitch-recovery, but also lower video quality.
# With fps=48 and keyframerate=5, glitches will stay visible for around 100ms in worst case.
# You can set this higher or lower according to your needs. Minimum value is 2.
KEYFRAMERATE=8
#
#
# Set additional raspivid parameters here
EXTRAPARAMS="-cd H264 -n -fl -ih -pf high -if both -ex sports -mm average -awb horizon"
#
#
# Serial port and baudrate (19200 is minimum) to use for the R/C connection between air Pi and flight control
# Set this to "/dev/serial0" for Pi onboard serial port or  "/dev/ttyUSB0" for USB-to-serial adapter
FC_RC_SERIALPORT=/dev/serial0
FC_RC_BAUDRATE=115200
#
#
# Serial port and baudrate to use for the telemetry connection between air Pi and flight control
# Set this to "/dev/serial0" for Pi onboard serial port or  "/dev/ttyUSB0" for USB-to-serial adapter
FC_TELEMETRY_SERIALPORT=/dev/serial0
FC_TELEMETRY_BAUDRATE=115200
#
#
# not supported yet, do not change
FC_MSP_SERIALPORT=/dev/ttyUSB0
FC_MSP_BAUDRATE=115200
#
#
#
# GROUNDPI settings
# ============================================================
#
# Set to "N" to not display the OSD
DISPLAY_OSD=Y
#
# Set to "Y" to scan for wifi networks with airodump-ng before starting RX
AIRODUMP=N
#
# Number of seconds wifi scanner is shown. Minimum recommended scanning time is 25 seconds.
AIRODUMP_SECONDS=25
#
# set this to "Y" to enable Wifi Hotspot and you (manually) set the band below. Set "auto" (recommended) for automatic band 
# selection.
# set to "N" for no wifi hotspot
#Default SSID is "EZ-Wifibroadcast", password is "wifibroadcast"
# smartphone/tablet or computer connected to the RX Pi via WiFi.
WIFI_HOTSPOT=auto
#
# wifi hotspot depends on your groundpi capabilty. Set to "a" for 5.8ghz, "g" for 2.4ghz
# Channels 1-11 for 2.4Ghz, Channels 36,40,44,48,52,56,60,64 for 5Ghz
# NOTE with WIFI_HOTSPOT=auto your setting here will be over written
HOTSPOT_BAND=a
HOTSPOT_CHANNEL=52
#
# Set to "internal" to use the interal Pi3 wifi chip or the MAC address of the USB wifi card you want to use
# NOTE "auto" hotspot only works with internal wifihotspot. 
WIFI_HOTSPOT_NIC=internal
#
# set this to "Y" to enable Ethernet hotspot. This will forward the received video and telemetry streams
# to another computer or other device connected to the Raspberry via Ethernet
ETHERNET_HOTSPOT=N
#
# Set to "Y" to enable periodic screenshots every 10 seconds
ENABLE_SCREENSHOTS=N
#
# Set to "memory" to use RAMdisk for temporary video/screenshot/telemetry storage. This limits recording time
# to ~12-14 minutes, but is the safe way. If you need longer recording times, use "sdcard", to use the sdcard
# as the temporary video storage. Keep in mind though, that this might introduce video stutter and/or bad blocks.
# Use a fast sdcard and TEST CAREFULLY BEFORE USING!
VIDEO_TMP=memory
#
#
# set this to "Y" to enable wifibroadcast relay mode. This will forward the received video and telemetry streams
# to another wifibroadcast RX. Note! Currently, the RSSI display you see on the RX behind the relay is not the RSSI
# between aircraft and ground, but between relay and rx on the ground!
RELAY=N
RELAY_NIC=112233445566
RELAY_FREQ=5220
#
# Set this to "Y" to disable text messages about Display and Wifi card setup etc.
QUIET=N
#
#
# serial port settings if using TELEMETRY_TRANSMISSION=external
EXTERNAL_TELEMETRY_SERIALPORT_GROUND=/dev/serial0
EXTERNAL_TELEMETRY_SERIALPORT_GROUND_BAUDRATE=57600
#
#
# set to "Y" to enable output of telemetry to serialport on ground Pi (for antenna tracker etc.)
ENABLE_SERIAL_TELEMETRY_OUTPUT=N
# baudrate and serialport used for ground Pi telemetry output
TELEMETRY_OUTPUT_SERIALPORT_GROUND=/dev/serial0
TELEMETRY_OUTPUT_SERIALPORT_GROUND_BAUDRATE=57600
#
#
# Set this to "raw" to forward a raw h264 stream to 2nd display devices (for FPV_VR app)
# Set to "rtp" to forward RTP h264 stream (for Tower app and gstreamer etc.)
FORWARD_STREAM=rtp
#
# UDP port to send video stream to, set to 5000 for FPV_VR app or 5600 for Mission Planner
VIDEO_UDP_PORT=5600
#
#
# Mavlink forwarder to use. Choose "mavlink-routerd" or "cmavnode"
MAVLINK_FORWARDER=mavlink-routerd
#
#
# Set this to "Y" to enable collection of extra debug logs. If you experience any issues,
# please reproduce them with debug set to "Y" and plug a USB memory stick afterwards, you
# will find the debug logs on the memory stick. THIS WILL ALSO REENABLE TEXT OUTPUT ON AIRPI
# AND ADDITIONAL SSH FUNCTIONALITY ON AIRPI
DEBUG=N
#
#AUDIO Over Open.HD Features the ability to transmit audio and output over analog, HDMI or set to auto detect. 
#*USE ONLY WITH PI2 or PI3 Air.

#0 Auto, 1 Analog, 2 HDMI
DefaultAudioOut=0
IsAudioTransferEnabled=0
MicBoost=75
SpeakersLevel=75

# Camera Switcher Adapter 
#This Camera Switcher feature must be used with the Arducam 4 camera Raspberry Pi multiplexer.  
#If no camera switcher is detected, feature is automatically disabled.  if used, simply assign desired 
#RC Channel and pwm values for each camera.  default settings are for 3 cameras (CAM A, B, & C) *Cam 4 "D" disabled by default.
IsCamera1Enabled=1
IsCamera2Enabled=1
IsCamera3Enabled=0
IsCamera4Enabled=0

DefaultCameraId=1
ChannelToListen=16

Camera1ValueMin=700
Camera1ValueMax=1400

Camera2ValueMin=1450
Camera2ValueMax=2100

Camera3ValueMin=2150
Camera3ValueMax=2200

Camera4ValueMin=2250
Camera4ValueMax=2500
#
# FEATURE: 2-WAY COMM For Air/Ground settings with Open.HD APP.
#This enables or disables two-way communication between the open HD app and air/ground units.
#**Setting "2" disables AirPi remote settings (not needed anyways), 
#primary benefit is to keep RPI zero CPU Usage down to a minimum with Atheros. Setting "1" is required with Encrypted RC

#Values "2"=Enables Ground Only(Best for Atheros+SmartSync); "1"=EnableAir/Ground (REQUIRED FOR RALINK/REALTEK ENCRYPTED RC)

RemoteSettingsEnabled=2

SmartSync_StartupMode=1
SmartSyncRC_Channel=2
SmartSyncGround_Countdown=45
SmartSyncOFF_RC_Value=1700
SmartSyncStayON_RC_Value=1300
#Values: joystick   GPIO   *Simply Jump GPIO #21 & Ground to Trigger or Bypass SmartSync (Trigger depends on default SmartSync_StartupMode = 1 OR 2)
SmartSyncControlVia=joystick



#IP or USB secondary camera. To use "IsBandSwicherEnabled=1" must be enabled
#RC channel to switch 3 different modes:  (#Camera1ValueMin .. Camera3ValueMax - used )
ChannelIPCamera=7
#Mode 1: LCD(HDMI) + android phone - RPi CSI camera
#Mode 2: LCD(HDMI) - RPi CSI camera, android phone - IP or USB camera. Bitrate = bitrate / 2 (20MHz) ,4(10Mhz) ,8(5Mhz). IPCameraLowRes is used  
#Mode 3: Adroid phone only -  IP or USB camera. IPCameraHiRes (20MHz) , or auto bitrate = initial-bitrate=\$1 USBCamera.  (20MHz, 10Mhz /2, 5Mhz /4). (To use fixed: initial-bitrate=200000)

#Values: No, IP, USB
SecondaryCamera=IP

USBCamera="gst-launch-1.0 uvch264src device=/dev/video0 initial-bitrate=\$1 average-bitrate=\$1 iframe-period=1000 name=src auto-start=true src.vidsrc ! queue ! video/x-h264,width=1280,height=720,framerate=30/1 ! h264parse ! rtph264pay ! udpsink host=127.0.0.1 port=5600"
IPCameraHiRes="gst-launch-1.0 rtspsrc location=\"rtsp://192.168.0.10:554/user=admin&password=&channel=1&stream=0.sdp\" latency=0 ! udpsink port=5600 host=127.0.0.1"
IPCameraLowRes="gst-launch-1.0 rtspsrc location=\"rtsp://192.168.0.10:554/user=admin&password=&channel=1&stream=1.sdp\" latency=0 ! udpsink port=5600 host=127.0.0.1"


